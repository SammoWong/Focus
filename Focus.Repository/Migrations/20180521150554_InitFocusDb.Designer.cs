// <auto-generated />
using Focus.Domain.Enums;
using Focus.Repository.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Focus.Repository.Migrations
{
    [DbContext(typeof(FocusDbContext))]
    [Migration("20180521150554_InitFocusDb")]
    partial class InitFocusDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Focus.Domain.Entities.Button", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JsEvent");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("ModuleId");

                    b.Property<string>("Name");

                    b.Property<string>("Remark");

                    b.Property<int>("SortNumber");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Button");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Contact");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<string>("Creator");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("Enabled");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mobile");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Nature");

                    b.Property<string>("Phone");

                    b.Property<string>("ShortName");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Module", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Category");

                    b.Property<string>("Code");

                    b.Property<string>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsExpanded");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<string>("ParentId");

                    b.Property<short>("Rank");

                    b.Property<string>("Remark");

                    b.Property<int?>("SortNumber");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Organization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Category");

                    b.Property<string>("Code");

                    b.Property<string>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<string>("ParentId");

                    b.Property<int?>("SortNumber");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessId");

                    b.Property<short>("AccessType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MasterId");

                    b.Property<short>("MasterType");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int?>("SortNumber");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Position", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<string>("DepartmentId");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<string>("OrganizationId");

                    b.Property<string>("Remark");

                    b.Property<int?>("SortNumber");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<string>("Description");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Focus.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedTime");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedTime");

                    b.Property<string>("DepartmentId");

                    b.Property<string>("Email");

                    b.Property<bool>("Enabled");

                    b.Property<byte?>("Gender");

                    b.Property<string>("IdCard");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mobile");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<string>("OrganizationId");

                    b.Property<string>("Password");

                    b.Property<string>("PositionId");

                    b.Property<string>("RealName");

                    b.Property<string>("RoleId");

                    b.Property<string>("Salt");

                    b.Property<string>("WorkgroupId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Button", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Module", "Module")
                        .WithMany("Buttons")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Module", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithMany("Modules")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Organization", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithMany("Organizations")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Position", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithMany("Positions")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Focus.Domain.Entities.Organization", "Organization")
                        .WithMany("Positions")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Role", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Focus.Domain.Entities.User", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Focus.Domain.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Focus.Domain.Entities.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId");

                    b.HasOne("Focus.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
